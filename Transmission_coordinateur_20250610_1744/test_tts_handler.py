#!/usr/bin/env python3
"""
Test du TTSHandler avec le mod√®le fr_FR-upmc-medium
"""

import yaml
import sys
from pathlib import Path

# Ajouter le r√©pertoire courant au PYTHONPATH
sys.path.append(str(Path(__file__).parent))

def test_tts_handler():
    """Test du TTSHandler avec le mod√®le upmc"""
    
    print("üß™ Test du TTSHandler avec mod√®le fr_FR-upmc-medium")
    print("=" * 60)
    
    try:
        # Charger la configuration
        with open("Config/mvp_settings.yaml", 'r') as f:
            config = yaml.safe_load(f)
        
        print("‚úÖ Configuration charg√©e")
        print(f"üìç Mod√®le configur√©: {config['tts']['model_path']}")
        
        # V√©rifier que le mod√®le existe
        model_path = Path(config['tts']['model_path'])
        if not model_path.exists():
            print(f"‚ùå ERREUR: Mod√®le non trouv√©: {model_path}")
            return False
            
        config_path = Path(f"{config['tts']['model_path']}.json")
        if not config_path.exists():
            print(f"‚ùå ERREUR: Configuration du mod√®le non trouv√©e: {config_path}")
            return False
            
        print("‚úÖ Fichiers de mod√®le trouv√©s")
        
        # Importer et initialiser le TTSHandler
        from TTS.tts_handler import TTSHandler
        
        print("\nüîß Initialisation du TTSHandler...")
        tts_handler = TTSHandler(config['tts'])
        
        print("\nüéµ Test de synth√®se vocale...")
        test_phrases = [
            "Bonjour, je suis LUXA, votre assistant vocal intelligent.",
            "Test de synth√®se vocale avec le mod√®le fran√ßais.",
            "La synth√®se fonctionne parfaitement!"
        ]
        
        for i, phrase in enumerate(test_phrases, 1):
            print(f"\n--- Test {i}/3 ---")
            tts_handler.speak(phrase)
            
            # Petite pause entre les tests
            input("Appuyez sur Entr√©e pour continuer...")
        
        print("\n‚úÖ Tous les tests de synth√®se ont √©t√© effectu√©s avec succ√®s!")
        return True
        
    except ImportError as e:
        print(f"‚ùå ERREUR d'import: {e}")
        print("V√©rifiez que piper-tts est correctement install√©.")
        return False
        
    except Exception as e:
        print(f"‚ùå ERREUR: {e}")
        print(f"D√©tails: {type(e).__name__}: {str(e)}")
        return False

if __name__ == "__main__":
    success = test_tts_handler()
    
    if success:
        print("\nüéâ Test termin√© avec succ√®s!")
        print("Le TTSHandler est pr√™t pour l'int√©gration dans run_assistant.py")
    else:
        print("\n‚ùå Test √©chou√©!")
        print("V√©rifiez l'installation de piper-tts et la configuration.")
        sys.exit(1) 